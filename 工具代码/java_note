线程池
1、newSingleThreadExecutor 
创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。
适用：一个任务一个任务执行的场景
ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();  

2、newFixedThreadPool 
创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
适用：执行长期的任务，性能好很多
ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);  


3、newScheduledThreadPool 
创建一个可定期或者延时执行任务的定长线程池，支持定时及周期性任务执行。 
适用：周期性执行任务的场景
 ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);  
 scheduledThreadPool.schedule(new Runnable() {  
   public void run() {  
      System.out.println("delay 3 seconds");  
   }  
  }, 3, TimeUnit.SECONDS);  

4、newCachedThreadPoo 
创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 
适用：执行很多短期异步的小程序或者负载较轻的服务器
ExecutorService cachedThreadPool = Executors.newCachedThreadPool();  
for (int i = 0; i < 10; i++) {  
 cachedThreadPool.execute(new Runnable() {  
    public void run() {  
     System.out.println(index);  
    }  
   });  
}  


可重入锁与不可重入锁



CountDownLatch同步计数器
final CountDownLatch cdl= new CountDownLatch(ThreadNum);  //开始运行前等待n个线程执行完毕
for(int k=1;k<=ThreadNum;k++){
new Thread(new Runnable() {

	@Override
    public void run() {
        //todo
        cdl.countDown(); //每当一个任务线程执行完毕，就将计数器减1
    }

}).start();
}
cdl.await(); //主线程调用了await(),在当前计数到达零之前会被阻塞，当计数器的值变为0时，主线程就会被唤醒
//todo


//一个CountDouwnLatch实例是不能重复使用的，也就是说它是一次性的，锁一经被打开就不能再关闭使用了，如果想重复使用，请考虑使用CyclicBarrier。
public class CountDownLatchTest {

 // 模拟了100米赛跑，10名选手已经准备就绪，只等裁判一声令下。当所有人都到达终点时，比赛结束。
 public static void main(String[] args) throws InterruptedException {

     // 开始的倒数锁
     final CountDownLatch begin = new CountDownLatch(1);  //1个起点时间

     // 结束的倒数锁
     final CountDownLatch end = new CountDownLatch(10);  //10个终点时间

     // 十名选手
     final ExecutorService exec = Executors.newFixedThreadPool(10);

     for (int index = 0; index < 10; index++) {
         final int NO = index + 1;
         Runnable run = new Runnable() {
             public void run() {
                 try {
                     // 如果当前计数为零，则此方法立即返回。
                     // 等待
                     begin.await(); //任何调用了await的线程，必须等它计数器减到0才能被唤醒
                     Thread.sleep((long) (Math.random() * 10000)); //每个人耗时随机
                     System.out.println("No." + NO + " arrived");
                 } catch (InterruptedException e) {
                 } finally {
                     // 每个选手到达终点时，end就减一
                     end.countDown();
                 }
             }
         };
         exec.submit(run);
     }
     System.out.println("Game Start");
     // begin减一，开始游戏
     begin.countDown();
     // 等待end变为0，即所有选手到达终点
     end.await();
     System.out.println("Game Over");
     exec.shutdown();
 }
}



OSI七层模型
第7层应用层（Application）协议和应用：http,ftp,tftp,telnet,dns,smtp。此层是用户与计算机进行实际通信的地方.只是当马上就要访问网络时,才会实际上用到这一层.
第6层表示层（Presnation）协议和应用：ebcdic,ascii,jpeg,tiff,midi,mpeg
第5层会话层（Session）协议和应用：nfs,sql,rpc,x-windows,netbios

第4层传输层（Transport 此层数据单位【段segment】）协议和应用：tcp,udp,spx
第3层网络层（Network   此层数据单位【包packet】）协议和应用：ip,ipx,appletalk,icmp
第2层链路层（Data Link 此层数据单位【帧Frame】）协议和应用：802.3,802.2,atm,fr
第1层物理层（Physical此层数据单位【比特流Bit】）协议和应用：v.35,eia/tia 323       
