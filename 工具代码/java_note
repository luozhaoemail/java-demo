==============================
============线程池============
==============================
1、newSingleThreadExecutor 
创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。
适用：一个任务一个任务执行的场景
ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();  


2、newFixedThreadPool 
创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
适用：执行长期的任务，性能好很多
ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);  


3、newScheduledThreadPool 
创建一个可定期或者延时执行任务的定长线程池，支持定时及周期性任务执行。 
适用：周期性执行任务的场景
 ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);  
 scheduledThreadPool.schedule(new Runnable() {  
   public void run() {  
      System.out.println("delay 3 seconds");  
   }  
  }, 3, TimeUnit.SECONDS);  


4、newCachedThreadPoo 
创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 
适用：执行很多短期异步的小程序或者负载较轻的服务器
ExecutorService cachedThreadPool = Executors.newCachedThreadPool();  
for (int i = 0; i < 10; i++) {  
 cachedThreadPool.execute(new Runnable() {  
    public void run() {  
     System.out.println(index);  
    }  
   });  
}  


==============================
=========java锁分类===========
==============================
公平锁/非公平锁
可重入锁/不可重入锁
独享锁/共享锁
互斥锁/读写锁
乐观锁/悲观锁
分段锁
偏向锁/轻量级锁/重量级锁
自旋锁

公平锁：多个线程按照申请锁的顺序来获取锁。
非公平锁：不是按照申请顺序来的（后申请的可先获取锁），但是吞吐量大。ReentrantLock和Synchronized都是非公平锁

可重入锁：递归锁，某个线程已经获得某个锁，可以再次获取锁而不会出现死锁，即可以重复获取相同的锁。好处是可一定程度避免死锁。ReentrantLock和Synchronized都是可重入锁
可重入锁：不可递归

独享锁：该锁一次只能被一个线程所持有，Synchronized和ReentrantLock都是独享锁
共享锁：该锁可被多个线程所持有

互斥锁：ReentrantLock
读写锁：ReadWriteLock，读锁是共享锁（可以并发读）； 写锁是独享锁，读写，写读 ，写写的过程是互斥的

乐观锁：乐观的认为，不加锁的并发操作不会出问题， 适合读
悲观锁：悲观的认为，不加锁的并发操作一定会出问题，适合写

分段锁：Segment，细化锁的粒度，当操作不需要更新整个数组的时候，就仅仅针对数组中的一项进行加锁操作
ConcurrentHashMap内部拥有一个Entry数组，数组中的每个元素又是一个链表,put元素的时候，
并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在那一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入。

偏向锁/轻量级锁/重量级锁都是针对Synchronized
偏向锁：是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。
轻量级锁：是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。
重量级锁：是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。

自旋锁：自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。



==============================
==CountDownLatch同步计数器====
==============================

final CountDownLatch cdl= new CountDownLatch(ThreadNum);  //开始运行前等待n个线程执行完毕
for(int k=1;k<=ThreadNum;k++){
new Thread(new Runnable() {

	@Override
    public void run() {
        //todo
        cdl.countDown(); //每当一个任务线程执行完毕，就将计数器减1
    }

}).start();
}
cdl.await(); //主线程调用了await(),在当前计数到达零之前会被阻塞，当计数器的值变为0时，主线程就会被唤醒
//todo


//一个CountDouwnLatch实例是不能重复使用的，也就是说它是一次性的，锁一经被打开就不能再关闭使用了，如果想重复使用，请考虑使用CyclicBarrier。
public class CountDownLatchTest {

 // 模拟了100米赛跑，10名选手已经准备就绪，只等裁判一声令下。当所有人都到达终点时，比赛结束。
 public static void main(String[] args) throws InterruptedException {

     // 开始的倒数锁
     final CountDownLatch begin = new CountDownLatch(1);  //1个起点时间

     // 结束的倒数锁
     final CountDownLatch end = new CountDownLatch(10);  //10个终点时间

     // 十名选手
     final ExecutorService exec = Executors.newFixedThreadPool(10);

     for (int index = 0; index < 10; index++) {
         final int NO = index + 1;
         Runnable run = new Runnable() {
             public void run() {
                 try {
                     // 如果当前计数为零，则此方法立即返回。
                     // 等待
                     begin.await(); //任何调用了await的线程，必须等它计数器减到0才能被唤醒
                     Thread.sleep((long) (Math.random() * 10000)); //每个人耗时随机
                     System.out.println("No." + NO + " arrived");
                 } catch (InterruptedException e) {
                 } finally {
                     // 每个选手到达终点时，end就减一
                     end.countDown();
                 }
             }
         };
         exec.submit(run);
     }
     System.out.println("Game Start");
     // begin减一，开始游戏
     begin.countDown();
     // 等待end变为0，即所有选手到达终点
     end.await();
     System.out.println("Game Over");
     exec.shutdown();
 }
}


=====================================
=========volatile 共享变量===========
=====================================
Java内存模型分为主内存和工作内存。
主内存对所有线程所共享；（方法区/堆区）
工作内存不共享每个线程有自己的工作内存;  （栈区/栈帧）
线程在工作时，从主内存中拷贝所需变量到自己的工作内存中。
线程对变量的所有操作，都必须在工作内存中进行，不能直接操作主存中的变量，也不能直接访问其他线程的工作内存。

当一个共享变量用 volatile 关键字修饰时，它会保证修改的值会被立即更新到主存中，
同时其他线程的工作内存中该共享变量的缓存将失效，当线程下次读取该变量时，将强制主存中读取最新值。
即所以线程都会直接读取该变量并且不缓存它。

volatile 无法保证操作的原子性,无法避免脏读(读到的不是最新数据)。因此多线程时加锁实现单例模式:

public class SparkConfig 
{
	private static volatile SparkConfig instance; //保证内存中只有一个SparkApi实例对象
	
	public static SparkConfig getIstance() {
		if(instance == null) {
		
			synchronized (SparkConfig.class) {
				if (instance == null) {					
					instance = new SparkConfig(); //只能在这内部使用私有构造方法
				}
			}
		}
		return instance;
	}
	
	private SparkConfig()  //私有构造方法，不对外提供。
	{	
		//todo
	}
}



==============================
=======OSI七层模型============
==============================

第7层应用层（Application）协议和应用：http,ftp,tftp,telnet,dns,smtp。此层是用户与计算机进行实际通信的地方.只是当马上就要访问网络时,才会实际上用到这一层.
第6层表示层（Presnation）协议和应用：ebcdic,ascii,jpeg,tiff,midi,mpeg
第5层会话层（Session）协议和应用：nfs,sql,rpc,x-windows,netbios

第4层传输层（Transport 此层数据单位【段segment】）协议和应用：tcp,udp,spx
第3层网络层（Network   此层数据单位【包packet】）协议和应用：ip,ipx,appletalk,icmp
第2层链路层（Data Link 此层数据单位【帧Frame】）协议和应用：802.3,802.2,atm,fr
第1层物理层（Physical此层数据单位【比特流Bit】）协议和应用：v.35,eia/tia 323       



==============================
===包装类、拆箱和装箱=========
==============================
基本数据类型	对应的包装类(Wrapper Classes)
byte	        Byte
short	        Short
int		        Integer
long	        Long
char	        Character
float	        Float
double	        Double
boolean	        Boolean
装箱: 基本类型 > 包装类
拆箱: 包装类   > 基本类型

Integer obj = new Integer(m); // 手动装箱
int n = obj.intValue(); // 手动拆箱

int m = 500;
Integer obj = m; // 自动装箱
int n = obj; // 自动拆箱

引用类型数据均继承了 Object 类



==============================
========类加载过程============
==============================
类加载步骤: 加载、验证、准备、解析、初始化、使用、卸载
加载：将字节码加载到内存中，并在JVM方法区创建一个 Class对象
验证：  1 JVM规范校验（对字节流进行文件格式校验，判断是否符合 JVM 规范）
		2  代码逻辑校验（对数据流和控制流进行校验）

->准备：JVM开始为类变量分配内存并初始化，为类变量初始化零值，如果是被 final 修饰则是指定的值。
		只会为「静态变量」分配内存，而不会为「类成员变量」分配内存。「类成员变量」的内存分配需要等到初始化阶段才开始。

解析：JVM 针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7 类引用进行解析。
	  这个阶段的主要任务是将其在常量池中的符号引用替换成直接其在内存中的直接引用。

-->初始化：有类初始化方法 和 对象初始化方法 ，类初始化方法一般在类初始化的时候执行。对象初始化方法一般在实例化类对象的时候执行。
	1 遇到 new、getstatic、putstatic、invokestatic触发，即实例化对象、读取或设置一个类的静态字段式触发
    2 反射调用调用时触发
    3 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。
    4 执行Main()时，会先触发初始化主类。
    5 java.lang.invoke.MethodHandle调用方法句柄时触发

使用：JVM 便开始从入口方法开始执行用户的程序代码
卸载：JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存


静态代码块 static{}
构造代码块：{}
执行顺序优先级：静态块 -> main() -> 构造块 -> 构造方法。
Son.factor;  //调用Son类继承的静态变量时，会先初始化它的父类的static{} (双亲委派)，但不会初始化本类
new Son();  //new Son类时，会触发本类的初始化，但是要先初始化它的父类的static{}，然后再是父类的构造函数








==============================
==================
==============================




==============================
==================
==============================








==============================
==================
==============================


