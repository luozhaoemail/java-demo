线程池
1、newSingleThreadExecutor 
创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。
适用：一个任务一个任务执行的场景
ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();  

2、newFixedThreadPool 
创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
适用：执行长期的任务，性能好很多
ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);  


3、newScheduledThreadPool 
创建一个可定期或者延时执行任务的定长线程池，支持定时及周期性任务执行。 
适用：周期性执行任务的场景
 ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);  
 scheduledThreadPool.schedule(new Runnable() {  
   public void run() {  
      System.out.println("delay 3 seconds");  
   }  
  }, 3, TimeUnit.SECONDS);  

4、newCachedThreadPoo 
创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 
适用：执行很多短期异步的小程序或者负载较轻的服务器
ExecutorService cachedThreadPool = Executors.newCachedThreadPool();  
for (int i = 0; i < 10; i++) {  
 cachedThreadPool.execute(new Runnable() {  
    public void run() {  
     System.out.println(index);  
    }  
   });  
}  
